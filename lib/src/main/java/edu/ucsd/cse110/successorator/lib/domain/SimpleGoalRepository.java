package edu.ucsd.cse110.successorator.lib.domain;

import java.util.List;

import edu.ucsd.cse110.successorator.lib.data.InMemoryDataSource;
import edu.ucsd.cse110.successorator.lib.util.Subject;
import java.util.stream.IntStream;

public class SimpleGoalRepository implements GoalRepository {
    private final InMemoryDataSource dataSource;

    private List<Goal> unfinishedGoals;
    private List<Goal> finishedGoals;

    public SimpleGoalRepository(InMemoryDataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Override
    public Subject<Goal> find(int id) {
        return dataSource.getGoalSubject(id);
    }

    @Override
    public Subject<List<Goal>> findAll() {
        return dataSource.getAllGoalsSubject();
    }

    @Override
    public void save(Goal goal) {
        dataSource.putGoal(goal);
    }

    @Override
    public void save(List<Goal> goals) {
        dataSource.putGoals(goals);
    }

    @Override
    public void remove(int id) {
        dataSource.removeGoal(id);
    }
    @Override
    public void append(Goal goal){
        //if goal name is not null, then add it to the end of the list
        if(goal.getName() != null){
            dataSource.putGoal(
                    goal.withSortOrder(dataSource.getMaxSortOrder()+1)
            );
        }
        else{
            throw new IllegalArgumentException("Goal name cannot be null");
        }
    }

    @Override
    public void prepend(Goal goal){
        //if goal name is not null, then add it to the front of the list
        if(goal.getName() != null){
            dataSource.shiftSortOrders(0, dataSource.getMaxSortOrder(), 1);
            dataSource.putGoal(
                    goal.withSortOrder(dataSource.getMinSortOrder() - 1)
            );
            //through error
        }
        else{
            throw new IllegalArgumentException("Goal name cannot be null");
        }

    }

    //generated by ChatGPT
    @Override
    public void addGoalBetweenFinishedAndUnfinished(Goal goal) {
        // Get all the goals from the data source
        List<Goal> allGoals = dataSource.getGoals();

        // Find the index where the new goal should be inserted
        int insertIndex = 0;

        for (Goal existingGoal : allGoals) {
            // If the existing goal is finished, stop searching and insert behind it
            if (existingGoal.isFinished()) {
                break;
            }
            insertIndex++;
        }

        // Insert the new goal at the calculated index
        dataSource.shiftSortOrders(insertIndex, dataSource.getMaxSortOrder(), 1);
        dataSource.putGoal(goal.withSortOrder(dataSource.getMinSortOrder() + insertIndex));
    }

}